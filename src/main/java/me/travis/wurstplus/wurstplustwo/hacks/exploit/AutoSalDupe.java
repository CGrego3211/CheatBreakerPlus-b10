/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.block.BlockChest
 *  net.minecraft.client.gui.inventory.GuiScreenHorseInventory
 *  net.minecraft.entity.Entity
 *  net.minecraft.entity.passive.AbstractChestHorse
 *  net.minecraft.entity.player.EntityPlayer
 *  net.minecraft.init.Items
 *  net.minecraft.inventory.ClickType
 *  net.minecraft.item.ItemBlock
 *  net.minecraft.item.ItemShulkerBox
 *  net.minecraft.item.ItemStack
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketUseEntity
 *  net.minecraft.util.EnumHand
 *  net.minecraftforge.event.entity.EntityJoinWorldEvent
 *  org.lwjgl.input.Keyboard
 */
package me.travis.wurstplus.wurstplustwo.hacks.exploit;

import java.util.Comparator;
import java.util.function.Predicate;
import me.travis.wurstplus.wurstplustwo.event.events.WurstplusEventMove;
import me.travis.wurstplus.wurstplustwo.guiscreen.settings.WurstplusSetting;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;
import me.travis.wurstplus.wurstplustwo.util.SalTimer;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.BlockChest;
import net.minecraft.client.gui.inventory.GuiScreenHorseInventory;
import net.minecraft.entity.Entity;
import net.minecraft.entity.passive.AbstractChestHorse;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.inventory.ClickType;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemShulkerBox;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.util.EnumHand;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import org.lwjgl.input.Keyboard;

public class AutoSalDupe
extends WurstplusHack {
    WurstplusSetting shulkerOnly = this.create("OnlyShulkers", "AutoDupeShulkerOnly", true);
    WurstplusSetting hitGround = this.create("GroundCheck", "AutoDupeGround", true);
    WurstplusSetting Delay = this.create("Delay", "AutoDupeDelay", 1.52, 0.15, 10.0);
    private boolean doDrop = false;
    private boolean doChest = false;
    private boolean doSneak = false;
    private boolean start = false;
    private boolean finished = false;
    private boolean grounded = false;
    private int itemsToDupe;
    private int itemsMoved;
    private int itemsDropped;
    private GuiScreenHorseInventory l_Chest;
    private final SalTimer timer = new SalTimer();
    private boolean noBypass = false;
    @EventHandler
    private final Listener<WurstplusEventMove> updateListener = new Listener<WurstplusEventMove>(p_Event -> {
        if (Keyboard.isKeyDown((int)1)) {
            this.toggle();
            return;
        }
        if (this.finished) {
            this.finished = false;
            this.itemsMoved = 0;
            this.itemsDropped = 0;
            this.start = true;
            return;
        }
        if (!this.timer.passed((float)this.Delay.get_value(0) * 100.0f)) {
            return;
        }
        this.timer.reset();
        if (this.doSneak) {
            if (!AutoSalDupe.mc.player.isSneaking()) {
                AutoSalDupe.mc.gameSettings.keyBindSneak.pressed = true;
                return;
            }
            AutoSalDupe.mc.gameSettings.keyBindSneak.pressed = false;
            this.doSneak = false;
            if (!this.hitGround.get_value(true)) {
                this.finished = true;
            } else {
                this.grounded = true;
            }
            return;
        }
        if (this.grounded && AutoSalDupe.mc.player.onGround) {
            this.grounded = false;
            this.finished = true;
            return;
        }
        if (this.start && this.is_active()) {
            this.itemsToDupe = 0;
            this.itemsMoved = 0;
            Entity l_Entity = AutoSalDupe.mc.world.loadedEntityList.stream().filter(this::isValidEntity).min(Comparator.comparing(p_Entity -> Float.valueOf(AutoSalDupe.mc.player.getDistance(p_Entity)))).orElse(null);
            if (l_Entity instanceof AbstractChestHorse) {
                AbstractChestHorse l_entity = (AbstractChestHorse)l_Entity;
                if (!l_entity.hasChest()) {
                    int l_Slot = this.getChestInHotbar();
                    if (l_Slot != -1 && AutoSalDupe.mc.player.inventory.currentItem != l_Slot) {
                        AutoSalDupe.mc.player.inventory.currentItem = l_Slot;
                        AutoSalDupe.mc.playerController.updateController();
                        AutoSalDupe.mc.playerController.interactWithEntity((EntityPlayer)AutoSalDupe.mc.player, (Entity)l_entity, EnumHand.MAIN_HAND);
                    } else {
                        if (AutoSalDupe.mc.player.inventory.currentItem != l_Slot) {
                            this.toggle();
                            return;
                        }
                        AutoSalDupe.mc.playerController.interactWithEntity((EntityPlayer)AutoSalDupe.mc.player, (Entity)l_entity, EnumHand.MAIN_HAND);
                    }
                }
                this.start = false;
                AutoSalDupe.mc.playerController.interactWithEntity((EntityPlayer)AutoSalDupe.mc.player, (Entity)l_entity, EnumHand.MAIN_HAND);
                AutoSalDupe.mc.player.sendHorseInventory();
                this.doChest = true;
            }
        }
        if (this.doChest && !(AutoSalDupe.mc.currentScreen instanceof GuiScreenHorseInventory)) {
            this.doChest = false;
            this.start = true;
            return;
        }
        if (AutoSalDupe.mc.currentScreen instanceof GuiScreenHorseInventory) {
            this.l_Chest = (GuiScreenHorseInventory)AutoSalDupe.mc.currentScreen;
            this.itemsToDupe = this.getItemsToDupe();
            for (int l_I = 2; l_I < this.l_Chest.horseInventory.getSizeInventory() + 1; ++l_I) {
                ItemStack l_Stack = this.l_Chest.horseInventory.getStackInSlot(l_I);
                if ((this.itemsToDupe == 0 || this.itemsMoved == this.l_Chest.horseInventory.getSizeInventory() - 2) && this.doChest || this.itemsDropped >= this.itemsMoved && this.doDrop) break;
                if ((l_Stack.isEmpty() || l_Stack.getItem() == Items.AIR) && this.doChest) {
                    this.HandleStoring(this.l_Chest.inventorySlots.windowId, this.l_Chest.horseInventory.getSizeInventory() - 9);
                    --this.itemsToDupe;
                    this.itemsMoved = this.getItemsInRidingEntity();
                    return;
                }
                if (this.doChest || this.shulkerOnly.get_value(true) && !(l_Stack.getItem() instanceof ItemShulkerBox) || l_Stack.isEmpty() || !this.doDrop) continue;
                if (this.canStore()) {
                    AutoSalDupe.mc.playerController.windowClick(AutoSalDupe.mc.player.openContainer.windowId, l_I, 0, ClickType.QUICK_MOVE, (EntityPlayer)AutoSalDupe.mc.player);
                } else {
                    AutoSalDupe.mc.playerController.windowClick(this.l_Chest.inventorySlots.windowId, l_I, -999, ClickType.THROW, (EntityPlayer)AutoSalDupe.mc.player);
                }
                ++this.itemsDropped;
                return;
            }
            if (this.doChest) {
                this.doChest = false;
                this.doDupe();
                return;
            }
            if (this.doDrop) {
                this.doDrop = false;
                AutoSalDupe.mc.player.closeScreen();
                AutoSalDupe.mc.gameSettings.keyBindSneak.pressed = true;
                this.doSneak = true;
            }
        }
    }, new Predicate[0]);
    @EventHandler
    private final Listener<EntityJoinWorldEvent> OnWorldEvent = new Listener<EntityJoinWorldEvent>(p_Event -> {
        if (p_Event.getEntity() == AutoSalDupe.mc.player) {
            this.toggle();
        }
    }, new Predicate[0]);

    public AutoSalDupe() {
        super(WurstplusCategory.WURSTPLUS_EXPLOIT);
        this.name = "Auto SalC1 Dupe";
        this.tag = "AutoSalC1Dupe";
        this.description = "performs the salc1 treemc dupe automatically";
    }

    @Override
    public void enable() {
        super.enable();
        this.timer.reset();
        this.start = true;
    }

    @Override
    public void disable() {
        super.disable();
        this.noBypass = false;
        this.doDrop = false;
        this.doChest = false;
        this.doSneak = false;
        this.start = false;
        this.finished = false;
        this.grounded = false;
        this.itemsToDupe = 0;
        this.itemsMoved = 0;
        this.itemsDropped = 0;
        this.timer.reset();
    }

    private boolean isValidEntity(Entity entity) {
        if (entity instanceof AbstractChestHorse) {
            AbstractChestHorse l_ChestHorse = (AbstractChestHorse)entity;
            return !l_ChestHorse.isChild() && l_ChestHorse.isTame();
        }
        return false;
    }

    private int getChestInHotbar() {
        for (int i = 0; i < 9; ++i) {
            Block block;
            ItemStack stack = AutoSalDupe.mc.player.inventory.getStackInSlot(i);
            if (stack == ItemStack.EMPTY || !(stack.getItem() instanceof ItemBlock) || !((block = ((ItemBlock)stack.getItem()).getBlock()) instanceof BlockChest)) continue;
            return i;
        }
        return -1;
    }

    private void HandleStoring(int p_WindowId, int p_Slot) {
        for (int l_Y = 9; l_Y < AutoSalDupe.mc.player.inventoryContainer.inventorySlots.size() - 1; ++l_Y) {
            ItemStack l_InvStack = AutoSalDupe.mc.player.inventoryContainer.getSlot(l_Y).getStack();
            if (l_InvStack.isEmpty() || l_InvStack.getItem() == Items.AIR || !(l_InvStack.getItem() instanceof ItemShulkerBox) && this.shulkerOnly.get_value(true)) continue;
            AutoSalDupe.mc.playerController.windowClick(p_WindowId, l_Y + p_Slot, 0, ClickType.QUICK_MOVE, (EntityPlayer)AutoSalDupe.mc.player);
            return;
        }
    }

    private void doDupe() {
        this.noBypass = true;
        Entity l_Entity = AutoSalDupe.mc.world.loadedEntityList.stream().filter(this::isValidEntity).min(Comparator.comparing(p_Entity -> Float.valueOf(AutoSalDupe.mc.player.getDistance(p_Entity)))).orElse(null);
        if (l_Entity instanceof AbstractChestHorse) {
            AutoSalDupe.mc.player.connection.sendPacket((Packet)new CPacketUseEntity(l_Entity, EnumHand.MAIN_HAND, l_Entity.getPositionVector()));
            this.noBypass = false;
            this.doDrop = true;
        }
    }

    private int getItemsToDupe() {
        int i = 0;
        for (int l_Y = 9; l_Y < AutoSalDupe.mc.player.inventoryContainer.inventorySlots.size() - 1; ++l_Y) {
            ItemStack l_InvStack = AutoSalDupe.mc.player.inventoryContainer.getSlot(l_Y).getStack();
            if (l_InvStack.isEmpty() || l_InvStack.getItem() == Items.AIR || !(l_InvStack.getItem() instanceof ItemShulkerBox) && this.shulkerOnly.get_value(true)) continue;
            ++i;
        }
        if (i > this.l_Chest.horseInventory.getSizeInventory() - 1) {
            i = this.l_Chest.horseInventory.getSizeInventory() - 1;
        }
        return i;
    }

    private int getItemsInRidingEntity() {
        int i = 0;
        for (int l_I = 2; l_I < this.l_Chest.horseInventory.getSizeInventory() + 1; ++l_I) {
            ItemStack l_ItemStack = this.l_Chest.horseInventory.getStackInSlot(l_I);
            if (l_ItemStack.isEmpty() || l_ItemStack.getItem() == Items.AIR) continue;
            ++i;
        }
        return i;
    }

    private boolean canStore() {
        for (int l_Y = 9; l_Y < AutoSalDupe.mc.player.inventoryContainer.inventorySlots.size() - 1; ++l_Y) {
            ItemStack l_InvStack = AutoSalDupe.mc.player.inventoryContainer.getSlot(l_Y).getStack();
            if (!l_InvStack.isEmpty() && l_InvStack.getItem() != Items.AIR) continue;
            return true;
        }
        return false;
    }

    public boolean ignoreMountBypass() {
        return this.noBypass;
    }
}

