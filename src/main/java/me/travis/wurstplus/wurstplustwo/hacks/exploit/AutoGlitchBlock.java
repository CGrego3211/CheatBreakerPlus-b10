/*
 * Decompiled with CFR 0.151.
 * 
 * Could not load the following classes:
 *  net.minecraft.block.Block
 *  net.minecraft.block.BlockAir
 *  net.minecraft.block.BlockLiquid
 *  net.minecraft.block.BlockObsidian
 *  net.minecraft.entity.Entity
 *  net.minecraft.entity.item.EntityItem
 *  net.minecraft.entity.item.EntityXPOrb
 *  net.minecraft.item.ItemBlock
 *  net.minecraft.item.ItemStack
 *  net.minecraft.network.Packet
 *  net.minecraft.network.play.client.CPacketEntityAction
 *  net.minecraft.network.play.client.CPacketEntityAction$Action
 *  net.minecraft.network.play.client.CPacketPlayerDigging
 *  net.minecraft.network.play.client.CPacketPlayerDigging$Action
 *  net.minecraft.util.EnumFacing
 *  net.minecraft.util.EnumHand
 *  net.minecraft.util.math.AxisAlignedBB
 *  net.minecraft.util.math.BlockPos
 *  net.minecraft.util.math.Vec3d
 *  net.minecraft.util.math.Vec3i
 *  net.minecraft.world.GameType
 */
package me.travis.wurstplus.wurstplustwo.hacks.exploit;

import cf.warriorcrystal.other.xulu.BlockInteractionHelper;
import cf.warriorcrystal.other.xulu.Timer;
import me.travis.wurstplus.wurstplustwo.guiscreen.settings.WurstplusSetting;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.BlockLiquid;
import net.minecraft.block.BlockObsidian;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.item.EntityXPOrb;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraft.util.math.Vec3i;
import net.minecraft.world.GameType;

public class AutoGlitchBlock
extends WurstplusHack {
    Timer timer = new Timer();
    WurstplusSetting rotate = this.create("Rotate", "AGBRotate", true);
    WurstplusSetting noGlitchBlocks = this.create("NoGlitchBlocks", "AGBNoGlitchBlocks", true);
    WurstplusSetting jumpPower = this.create("JumpPower", "AGBJumpPower", 3.0, 0.5, 10.0);
    int lastHotbarSlot;
    int playerHotbarSlot;
    boolean isSneaking;

    public AutoGlitchBlock() {
        super(WurstplusCategory.WURSTPLUS_EXPLOIT);
        this.name = "Auto Glitch Block";
        this.tag = "AutoGlitchBlock";
        this.description = "automatically lagbacks in to a block";
    }

    @Override
    public void enable() {
        if (AutoGlitchBlock.mc.player == null) {
            this.disable();
            return;
        }
        this.playerHotbarSlot = AutoGlitchBlock.mc.player.inventory.currentItem;
        this.lastHotbarSlot = -1;
        AutoGlitchBlock.mc.player.jump();
        this.timer.reset();
    }

    @Override
    public void disable() {
        if (AutoGlitchBlock.mc.player == null) {
            return;
        }
        if (this.lastHotbarSlot != this.playerHotbarSlot && this.playerHotbarSlot != -1) {
            AutoGlitchBlock.mc.player.inventory.currentItem = this.playerHotbarSlot;
        }
        if (this.isSneaking) {
            AutoGlitchBlock.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)AutoGlitchBlock.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
            this.isSneaking = false;
        }
        this.playerHotbarSlot = -1;
        this.lastHotbarSlot = -1;
    }

    @Override
    public void update() {
        if (this.timer.hasReached(160L)) {
            BlockPos offsetPos = new BlockPos(0, -1, 0);
            BlockPos targetPos = new BlockPos(AutoGlitchBlock.mc.player.getPositionVector()).add(offsetPos.getX(), offsetPos.getY(), offsetPos.getZ());
            if (this.placeBlock(targetPos)) {
                if (this.lastHotbarSlot != this.playerHotbarSlot && this.playerHotbarSlot != -1) {
                    AutoGlitchBlock.mc.player.inventory.currentItem = this.playerHotbarSlot;
                    this.lastHotbarSlot = this.playerHotbarSlot;
                }
                if (this.isSneaking) {
                    AutoGlitchBlock.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)AutoGlitchBlock.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
                    this.isSneaking = false;
                }
                AutoGlitchBlock.mc.player.onGround = false;
                AutoGlitchBlock.mc.player.motionY = this.jumpPower.get_value(0);
            }
            this.toggle();
        }
    }

    private boolean placeBlock(BlockPos pos) {
        Block block = AutoGlitchBlock.mc.world.getBlockState(pos).getBlock();
        if (!(block instanceof BlockAir) && !(block instanceof BlockLiquid)) {
            return false;
        }
        for (Entity entity : AutoGlitchBlock.mc.world.getEntitiesWithinAABBExcludingEntity(null, new AxisAlignedBB(pos))) {
            if (entity instanceof EntityItem || entity instanceof EntityXPOrb) continue;
            return false;
        }
        EnumFacing side = BlockInteractionHelper.getPlaceableSide(pos);
        if (side == null) {
            return false;
        }
        BlockPos neighbour = pos.offset(side);
        EnumFacing opposite = side.getOpposite();
        if (!BlockInteractionHelper.canBeClicked(neighbour)) {
            return false;
        }
        Vec3d hitVec = new Vec3d((Vec3i)neighbour).add(0.5, 0.5, 0.5).add(new Vec3d(opposite.getDirectionVec()).scale(0.5));
        Block neighbourBlock = AutoGlitchBlock.mc.world.getBlockState(neighbour).getBlock();
        int obiSlot = this.findObiInHotbar();
        if (obiSlot == -1) {
            this.toggle();
        }
        if (this.lastHotbarSlot != obiSlot) {
            AutoGlitchBlock.mc.player.inventory.currentItem = obiSlot;
            this.lastHotbarSlot = obiSlot;
        }
        if (!this.isSneaking && BlockInteractionHelper.blackList.contains(neighbourBlock) || BlockInteractionHelper.shulkerList.contains(neighbourBlock)) {
            AutoGlitchBlock.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)AutoGlitchBlock.mc.player, CPacketEntityAction.Action.START_SNEAKING));
            this.isSneaking = true;
        }
        if (this.rotate.get_value(true)) {
            BlockInteractionHelper.faceVectorPacketInstant(hitVec);
        }
        AutoGlitchBlock.mc.playerController.processRightClickBlock(AutoGlitchBlock.mc.player, AutoGlitchBlock.mc.world, neighbour, opposite, hitVec, EnumHand.MAIN_HAND);
        AutoGlitchBlock.mc.player.swingArm(EnumHand.MAIN_HAND);
        AutoGlitchBlock.mc.rightClickDelayTimer = 4;
        if (this.noGlitchBlocks.get_value(true) && !AutoGlitchBlock.mc.playerController.getCurrentGameType().equals((Object)GameType.CREATIVE)) {
            AutoGlitchBlock.mc.player.connection.sendPacket((Packet)new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, neighbour, opposite));
        }
        return true;
    }

    public int findObiInHotbar() {
        int slot = -1;
        for (int i = 0; i < 9; ++i) {
            Block block;
            ItemStack stack = AutoGlitchBlock.mc.player.inventory.getStackInSlot(i);
            if (stack == ItemStack.EMPTY || !(stack.getItem() instanceof ItemBlock) || !((block = ((ItemBlock)stack.getItem()).getBlock()) instanceof BlockObsidian)) continue;
            slot = i;
            break;
        }
        return slot;
    }
}

